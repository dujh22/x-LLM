# coding=utf-8
# Copyright 2020 The TensorFlow Datasets Authors and the HuggingFace Datasets Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# 根据 Apache 许可证 2.0 版本（“许可证”）获得许可；除非符合许可证，否则不得使用此文件。
# 您可以在以下位置获取许可证的副本：http://www.apache.org/licenses/LICENSE-2.0
#
# 如果没有适用法律要求或书面同意，根据许可证分发的软件是按“原样”分发的，
# 没有任何明示或暗示的保证或条件。请参阅许可证以了解特定语言的权限。
#


# Lint as: python3

import os
import json
import datasets
logger = datasets.logging.get_logger(__name__)

_CITATION = """\
@misc{alpaca,
    author = {Rohan Taori and Ishaan Gulrajani and Tianyi Zhang and Yann Dubois and Xuechen Li and Carlos Guestrin and Percy Liang and Tatsunori B. Hashimoto },
    title = {Stanford Alpaca: An Instruction-following LLaMA model},
    year = {2023},
    publisher = {GitHub},
    journal = {GitHub repository},
    howpublished = {\\url{https://github.com/tatsu-lab/stanford_alpaca}},
}
"""

_DESCRIPTION = """\
Alpaca is a dataset of 52,000 instructions and demonstrations generated by OpenAI's text-davinci-003 engine. This instruction data can be used to conduct instruction-tuning for language models and make the language model follow instruction better.Alpaca 是由 OpenAI 的 text-davinci-003 引擎生成的一个包含 52,000 条指令和演示的数据集。这些指令数据可用于对语言模型进行指令调整，使语言模型更好地遵循指令。

The authors built on the data generation pipeline from Self-Instruct framework and made the following modifications:作者以 Self-Instruct 框架的数据生成管道为基础，进行了以下修改：
    The text-davinci-003 engine to generate the instruction data instead of davinci.由 text-davinci-003 引擎代替 davinci 生成指令数据。
    A new prompt was written that explicitly gave the requirement of instruction generation to text-davinci-003.  我们编写了新的提示，明确要求 text-davinci-003 生成指令。
    Much more aggressive batch decoding was used, i.e., generating 20 instructions at once, which significantly reduced the cost of data generation. 使用了更为激进的批量解码，即一次生成 20 条指令，这大大降低了数据生成的成本。
    The data generation pipeline was simplified by discarding the difference between classification and non-classification instructions. 通过剔除分类指令和非分类指令之间的差异，简化了数据生成流水线。
    Only a single instance was generated for each instruction, instead of 2 to 3 instances as in Self-Instruct. 每条指令只生成一个实例，而不是像 Self-Instruct 那样生成 2 至 3 个实例。
This produced an instruction-following dataset with 52K examples obtained at a much lower cost (less than $500). In a preliminary study, the authors also found that the 52K generated data to be much more diverse than the data released by Self-Instruct.这样就生成了一个包含 52K 个示例的指令遵循数据集，而且成本更低（不到 500 美元）。在初步研究中，作者还发现 52K 生成的数据比 Self-Instruct 发布的数据更加多样化。
"""

_LANG = ["ar", "el", "en", "es", "hi", "ru", "tr", "vi", "zh"]

class AlpacaConfig(datasets.BuilderConfig):

    """BuilderConfig for Alpaca 用于 Alpaca 的构建器配置"""

    def __init__(self, config: str, **kwargs):
        """
        Args:
            lang: string, language for the input text
            **kwargs: keyword arguments forwarded to super.
        """
        super(AlpacaConfig, self).__init__(**kwargs)  # 调用父类的初始化方法
        self.lang = config  # 设置语言属性


class Alpaca(datasets.GeneratorBasedBuilder):
    """This is an adapter for loading raw text parallel corpus. 这是一个用于加载原始文本平行语料库的适配器。"""
    VERSION = datasets.Version("1.0.0")
    BUILDER_CONFIGS = [AlpacaConfig(config=lang, name=f"alpaca_{lang}") for lang in _LANG]  # 创建不同语言配置的列表
    BUILDER_CONFIG_CLASS = AlpacaConfig  # 设置配置类

    def _info(self):
        return datasets.DatasetInfo(
            description=_DESCRIPTION,  # 设置数据集描述
            features=datasets.Features(  # 设置数据集特征
                {
                    "id": datasets.Value("string"),  # ID 特征
                    "instruction": datasets.Value("string"),  # 指令特征
                    "input": datasets.Value("string"),  # 输入特征
                    "output": datasets.Value("string"),  # 输出特征
                }
            ),
            homepage="https://github.com/tatsu-lab/stanford_alpaca",  # 数据集主页链接
            citation=_CITATION,  # 数据集引用信息
        )

    def _split_generators(self, dl_manager):
        return [
            datasets.SplitGenerator(name=datasets.Split.TRAIN, gen_kwargs={"filepath": os.path.join(self.base_path, f"alpaca_{self.config.lang}.json")}),
        ]

    def _generate_examples(self, filepath):
        """This function returns the examples in the raw (text) form. 此函数以原始（文本）形式返回示例。"""
        logger.info("[alpaca] generating examples from = %s", filepath)
        
        with open(filepath, encoding="utf-8") as f:
            alpaca = json.load(f)
            id_ = 0
            for sample in alpaca:
                yield id_, sample | {"id": id_}
                id_ += 1
